{
  "classDeclaration": "import java.util.Arrays;\n  public class Question1 {",
  "code": "public double computeTax(int[][] brackets, int income) {\n//Enter the code Here.Your class should be named Question1.\n \n }",
  "mainMethod": "public static void main(String[] args) {\n    int counter = 0;\n    Question1 question1 = new Question1();\n\n    counter += testComputeTax(question1, new int[][]{{3, 50}, {7, 10}, {12, 25}}, 10, 2.65000);\n    counter += testComputeTax(question1, new int[][]{{3, 50}, {7, 10}, {12, 25}}, 12, 3.15000);\n    counter += testComputeTax(question1, new int[][]{{1, 0}, {4, 25}, {5, 50}}, 2, 0.25000);\n    counter += testComputeTax(question1, new int[][]{{2, 50}}, 0, 0.00000);\n    counter += testComputeTax(question1, new int[][]{{2, 50}, {3, 99}, {4, 99}}, 3, 1.99000);\n    counter += testComputeTax(question1, new int[][]{{1, 0}}, 0, 0.00000);\n    counter += testComputeTax(question1, new int[][]{{1, 5}, {10, 10}, {100, 20}, {1000, 30}}, 1000, 288.95000);\n    counter += testComputeTax(question1, new int[][]{{100, 2}}, 99, 1.98000);\n    counter += testComputeTax(question1, generateBrackets(), 500, 127.50000);\n    counter += testComputeTax(question1, new int[][]{{1, 5}, {10, 10}, {100, 20}, {1000, 30}}, 1000, 288.95000);\n\n    long startTime = System.nanoTime();\n    System.out.println(\"Test Case Result: \" + counter + \" / 10\");\n    long endTime = System.nanoTime();\n    long duration = (endTime - startTime) / 1000000; // Milliseconds\n    System.out.println(\"Time taken for Test Case 10: \" + duration + \" milliseconds\");\n}\n\nprivate static int testComputeTax(Question1 question1, int[][] brackets, int income, double expectedTax) {\n    double tax = question1.computeTax(brackets, income);\n    if (tax == expectedTax) {\n        return 1;\n    } else {\n        System.out.println(\"Input parameters: brackets = \" + Arrays.deepToString(brackets) + \", income = \" + income);\n        return 0;\n    }\n}\n\nprivate static int[][] generateBrackets() {\n    int[][] brackets = new int[100][2];\n    for (int i = 0; i < 99; i++) {\n        brackets[i] = new int[]{(i + 1) * 10, i + 1};\n    }\n    brackets[99][0] = 1000;\n    brackets[99][1] = 1;\n    return brackets;\n}",
  "endOfCode": "}"
}